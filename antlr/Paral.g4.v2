grammar Paral;

program
    : line* EOF
    ;

// ------------------------ parser -------------------------

line
    : variable_def NEWLINE
    | matrix_def NEWLINE
    | comment_def NEWLINE
    | job_def
    | NEWLINE
    ;

variable_def
    : IDENTIFIER value_expr
    ;

matrix_def
    : IDENTIFIER list_expr (COLONCOLON list_expr)*
    ;

list_expr
    : LBRACK (value_expr (COMMA value_expr)*)? RBRACK
    ;

comment_def
    : COMMENT
    ;

job_def
    : job_directive_def* IDENTIFIER COLON cmd_expr+
    ;

job_directive_def
    : AT IDENTIFIER job_directive_value* NEWLINE
    ;

job_directive_value
    : value_expr 
    | IDENTIFIER
    ;

cmd_expr
    : NEWLINE (TAB | WS)? cmd_directive? (IDENTIFIER | STRING | SINGLE_QUOTE_STRING | NUMBER | MATRIX_REF | ARG | SINGLE_DASH_ARG | EQUALS | REF | URL)*
    ;

cmd_directive
    : cmd_directive_iden (LPAREN cmd_directive_value? RPAREN)*
    ;

cmd_directive_iden
    : AT IDENTIFIER
    ;

cmd_directive_value
    : (directive_arg (COMMA directive_arg)*)
    ;

directive_arg
    : value_expr
    | IDENTIFIER
    | MATRIX_REF
    | REF
    ;

value_expr
    : STRING         # string
    | NUMBER         # number
    | BOOLEAN        # bool
    | DURATION       # duration
    ;

// ------------------------ lexer -------------------------

IDENTIFIER: [a-zA-Z_][a-zA-Z0-9_]* ;
STRING: '"' (~["\r\n])* '"' ;
SINGLE_QUOTE_STRING: '\'' (~['\r\n])* '\'' ; // For single-quoted strings like 'Content-Type: application/json'
NUMBER: [0-9]+ ;
BOOLEAN: 'true' | 'false' ;
DURATION: NUMBER ('s' | 'm' | 'h') ;
AT: '@' ;
MATRIX_REF: '@' [1-9][0-9]* ;
REF: '&' IDENTIFIER ; // For &variable references
ARG: '--' [a-zA-Z][a-zA-Z0-9_-]* ; // For command-line flags like --target
SINGLE_DASH_ARG: '-' [a-zA-Z] ; // For single-dash flags like -H
EQUALS: '=' ;
LPAREN: '(' ;
RPAREN: ')' ;
URL: ('http' | 'https') '://' [a-zA-Z0-9_./-]+ ; // For URLs like https://some.notification.com/webhook/v2/xyz

COLON: ':' ;
COLONCOLON: '::' ;
LBRACK: '[' ;
RBRACK: ']' ;
COMMA: ',' ;

TAB: '\t' ;

NEWLINE: '\r'? '\n' ;
COMMENT: '#' ~[\r\n]* -> skip ;
WS: [ \t]+ -> skip ;