<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Project Navigator</title>
  <link rel="stylesheet" href="assets/graph.css">
  <script src="https://cdn.jsdelivr.net/npm/gojs/release/go.js"></script>
</head>
<body>
  <button id="sidebar-toggle">‚ò∞</button>
  <div id="sidebar">
    <div id="sidebar-header">
      <h2>Project Navigator</h2>
      <button id="sidebar-close">√ó</button>
    </div>
    <div id="sidebar-content">
      <div class="sidebar-section">
        <div class="section-header" data-section="file-info">
          <span class="toggle-icon">‚ñ∂</span>
          <span>üìÑ File Information</span>
        </div>
        <div class="section-content collapsed" id="file-info">
          <p><strong>Filename:</strong> <span id="file-name"></span></p>
          <p><strong>Content:</strong></p>
          <pre id="file-content"></pre>
        </div>
      </div>
      <div class="sidebar-section">
        <div class="section-header" data-section="node-tree">
          <span class="toggle-icon">‚ñ∂</span>
          <span>üå≥ Node Tree</span>
        </div>
        <div class="section-content collapsed" id="node-tree">
          <!-- Populated dynamically -->
        </div>
      </div>
      <div class="sidebar-section">
        <div class="section-header" data-section="all-nodes">
          <span class="toggle-icon">‚ñ∂</span>
          <span>üìã All Nodes</span>
        </div>
        <div class="section-content collapsed" id="all-nodes">
          <!-- Populated dynamically -->
        </div>
      </div>
    </div>
    <div class="resize-handle"></div>
  </div>
  <div id="graph-container">
    <h2>üîç Graph Visualization</h2>
    <div id="myDiagramDiv"></div>
    <div id="zoomControls">
      <button id="zoom-in">üîç+ Zoom In</button>
      <button id="zoom-out">üîç- Zoom Out</button>
      <button id="fit-view">üìê Fit View</button>
    </div>
  </div>
  <div id="node-details">
    <button class="close-btn">√ó</button>
    <div class="node-title"></div>
    <div class="node-type"></div>
    <div class="node-content"></div>
  </div>

  <script>
    // Initialize GoJS diagram
    function initDiagram() {
      const $ = go.GraphObject.make;
      const diagram = $(go.Diagram, "myDiagramDiv", {
        layout: $(go.LayeredDigraphLayout, {
          direction: 90, // Top-to-bottom
          layerSpacing: 50,
          columnSpacing: 20
        }),
        "undoManager.isEnabled": true
      });

      // Node template
      diagram.nodeTemplate = $(go.Node, "Auto",
        { selectable: true, cursor: "pointer" },
        $(go.Shape, "Rectangle",
          {
            fill: "#007bff",
            stroke: "#0056b3",
            strokeWidth: 1,
            width: 100,
            height: 40
          },
          new go.Binding("fill", "type", type => {
            const colors = {
              task: "#28a745",
              function: "#6f42c1",
              command: "#17a2b8",
              stash: "#dc3545",
              buf: "#ffc107",
              condition: "#fd7e14",
              trycatch: "#e83e8c",
              match: "#20c997"
            };
            return colors[type] || "#007bff";
          }),
          new go.Binding("stroke", "type", type => {
            const borders = {
              task: "#1e7e34",
              function: "#5a32a3",
              command: "#117a8b",
              stash: "#b02a37",
              buf: "#d39e00",
              condition: "#c65d07",
              trycatch: "#bb2d6b",
              match: "#179874"
            };
            return borders[type] || "#0056b3";
          })
        ),
        $(go.TextBlock,
          {
            margin: 5,
            font: "12px Segoe UI",
            stroke: "#fff",
            textAlign: "center"
          },
          new go.Binding("text", "label"))
      );

      // Link template
      diagram.linkTemplate = $(go.Link,
        {
          routing: go.Link.Orthogonal,
          corner: 5,
          selectable: true
        },
        $(go.Shape, { stroke: "#6c757d", strokeWidth: 2 }),
        $(go.Shape, { toArrow: "Standard", stroke: null, fill: "#6c757d" }),
        $(go.TextBlock,
          { segmentOffset: new go.Point(0, -10), font: "10px Segoe UI" },
          new go.Binding("text", "label"))
      );

      return diagram;
    }

    // Toggle sidebar
    const sidebar = document.getElementById('sidebar');
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebarClose = document.getElementById('sidebar-close');

    sidebarToggle.addEventListener('click', () => {
      sidebar.classList.toggle('hidden');
      sidebarToggle.style.display = sidebar.classList.contains('hidden') ? 'block' : 'none';
    });

    sidebarClose.addEventListener('click', () => {
      sidebar.classList.add('hidden');
      sidebarToggle.style.display = 'block';
    });

    // Toggle section collapse
    document.querySelectorAll('.section-header').forEach(header => {
      header.addEventListener('click', () => {
        const section = header.dataset.section;
        const content = document.getElementById(section);
        const icon = header.querySelector('.toggle-icon');
        content.classList.toggle('collapsed');
        icon.classList.toggle('expanded');
      });
    });

    // Sidebar resize
    const resizeHandle = document.querySelector('.resize-handle');
    let isResizing = false;

    resizeHandle.addEventListener('mousedown', (e) => {
      isResizing = true;
      resizeHandle.classList.add('resizing');
      document.addEventListener('mousemove', resizeSidebar);
      document.addEventListener('mouseup', stopResize);
    });

    function resizeSidebar(e) {
      if (!isResizing) return;
      const newWidth = Math.max(250, Math.min(600, e.clientX));
      sidebar.style.width = `${newWidth}px`;
    }

    function stopResize() {
      isResizing = false;
      resizeHandle.classList.remove('resizing');
      document.removeEventListener('mousemove', resizeSidebar);
      document.removeEventListener('mouseup', stopResize);
    }

    // Fetch and render DAG data
    async function fetchDAG() {
      try {
        const response = await fetch('/api/dag');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const dag = await response.json();
        renderDAG(dag);
        renderFileInfo();
      } catch (error) {
        console.error('Error fetching DAG:', error);
        document.getElementById('graph-container').innerHTML += '<p style="color: red;">Failed to load DAG. Please check the server.</p>';
      }
    }

    function renderFileInfo() {
      document.getElementById('file-name').textContent = 'simple.paral';
      document.getElementById('file-content').textContent = `items = [1, 1, 2]

@for items
task run_tests {
    -> @printf("Hi %d", @value)
}`;
    }

    function renderDAG(dag) {
      const diagram = initDiagram();
      const nodeDataArray = dag.nodes.map(node => ({
        key: node.id,
        label: node.label,
        type: node.type,
        metadata: node.metadata
      }));
      const linkDataArray = dag.edges.map(edge => ({
        from: edge.source,
        to: edge.target,
        label: edge.label
      }));

      diagram.model = new go.GraphLinksModel({
        nodeDataArray: nodeDataArray,
        linkDataArray: linkDataArray
      });

      // Node click handler
      diagram.addDiagramListener("ObjectSingleClicked", e => {
        const part = e.subject.part;
        if (!(part instanceof go.Node)) return;
        const details = document.getElementById('node-details');
        const title = details.querySelector('.node-title');
        const type = details.querySelector('.node-type');
        const content = details.querySelector('.node-content');

        title.textContent = part.data.label;
        type.textContent = part.data.type;
        content.innerHTML = Object.entries(part.data.metadata || {})
          .map(([key, value]) => `<strong>${key}:</strong> ${JSON.stringify(value)}`)
          .join('<br>');

        details.style.display = 'block';
      });

      // Close node details
      document.querySelector('#node-details .close-btn').addEventListener('click', () => {
        document.getElementById('node-details').style.display = 'none';
      });

      // Zoom controls
      document.getElementById('zoom-in').addEventListener('click', () => {
        diagram.commandHandler.increaseZoom();
      });

      document.getElementById('zoom-out').addEventListener('click', () => {
        diagram.commandHandler.decreaseZoom();
      });

      document.getElementById('fit-view').addEventListener('click', () => {
        diagram.commandHandler.zoomToFit();
      });

      // Render node tree
      const nodeTree = document.getElementById('node-tree');
      nodeTree.innerHTML = buildNodeTree(dag);

      // Render all nodes
      const allNodes = document.getElementById('all-nodes');
      allNodes.innerHTML = dag.nodes.map(node => `
        <div class="node-item ${node.type}" data-node-id="${node.id}">
          <span class="node-icon">${getNodeIcon(node.type)}</span>
          ${node.label} (${node.type})
        </div>
      `).join('');

      // Node item click handler
      allNodes.querySelectorAll('.node-item').forEach(item => {
        item.addEventListener('click', () => {
          const nodeId = item.dataset.nodeId;
          const node = diagram.findNodeForKey(nodeId);
          if (node) {
            diagram.centerRect(node.actualBounds);
            diagram.select(node);
            const event = new go.InputEvent();
            event.subject = { part: node };
            diagram.raiseDiagramEvent("ObjectSingleClicked", event);
          }
        });
      });
    }

    function getNodeIcon(type) {
      const icons = {
        task: 'üìã',
        function: '‚öôÔ∏è',
        command: 'üíª',
        stash: 'üì¶',
        buf: 'üóÇÔ∏è',
        condition: 'üîÄ',
        trycatch: 'üõ°Ô∏è',
        match: 'üîé'
      };
      return icons[type] || 'üîò';
    }

    function buildNodeTree(dag) {
      const tree = {};
      dag.nodes.forEach(node => {
        if (node.type === 'task') {
          tree[node.id] = { node, children: [] };
        }
      });

      dag.edges.forEach(edge => {
        if (edge.label === 'pipeline') {
          const parent = tree[edge.source];
          if (parent) {
            const childNode = dag.nodes.find(n => n.id === edge.target);
            if (childNode) {
              parent.children.push({ node: childNode, children: [] });
            }
          }
        }
      });

      return Object.values(tree).map(parent => `
        <div class="node-item ${parent.node.type}" data-node-id="${parent.node.id}">
          <span class="node-icon">${getNodeIcon(parent.node.type)}</span>
          ${parent.node.label}
          ${parent.children.length > 0 ? `
            <div class="node-children">
              ${parent.children.map(child => `
                <div class="node-item ${child.node.type}" data-node-id="${child.node.id}">
                  <span class="node-icon">${getNodeIcon(child.node.type)}</span>
                  ${child.node.label}
                </div>
              `).join('')}
            </div>
          ` : ''}
        </div>
      `).join('');
    }

    // Initialize
    fetchDAG();
  </script>
</body>
</html>